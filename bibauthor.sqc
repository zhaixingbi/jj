#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "util.h"
#include <stdbool.h>

EXEC SQL INCLUDE SQLCA; 
//EXEC SQL INCLUDE SQLDA; 

EXEC SQL BEGIN DECLARE SECTION;
   char  db[6] = "cs348";
   //char  sqlstmt[1000];
   
   char author_name[23];
   char pubid[11];
   char title[71];
   char publisher[51];
   splint32 year;
   splint32 volume;
   splint32 number;
   char appearsin[11];
   splint32 startpg;
   splint32 startpg;
EXEC SQL END DECLARE SECTION;

void print_author() {
    EXEC SQL DECLARE C_AUTHOR CURSOR FOR
        select name
        from author a1, wrote w1
        where w1.pubid = :pubid
            and a1.aid = w1.aid
        order by w1.aorder;
    EXEC SQL OPEN C_AUTHOR;
    EXEC SQL FETCH C_AUTHOR INTO :author_name;
    printf("Authors: %s", author_name);
    
    while(SQLCODE != 100){
    	EXEC SQL FETCH C_AUTHOR INTO :author_name;
        printf(", %s", author_name);
        EXEC SQL FETCH C_AUTHOR INTO :author_name;
    }
    printf("\n");
    EXEC SQL CLOSE C2;
}

void print_book() {
    EXEC SQL
        select b.publisher, b.year INTO :publisher, :year
        from book b
        where b.pubid = :pubid;
    print_author();
    printf("Publisher: %s\n", publisher);
    printf("Year: %d\n", year);
}

void print_journal() {
    EXEC SQL
        select j.volume, j.number, j.year INTO :volume, :number, :year
        from journal j
        where pubid := j.pubid;
    printf("Volume: %d\n", volume);
    printf("Number: %d\n", number);
    printf("Year: %d\n", year);
}

void print_proceedings() {
	EXEC SQL
	select p.year INTO :year
	from proceedings p
	where p.pubid = :pubid;
	printf("Year: %d\n", year);
}


void print_article() {
    EXEC SQL
        select a.appearsin, a.startpage, a.endpage INTO :appearsin, :startpg, :endpg
        from article a
        where a.pubid = :pubid;
    print_authors();
    printf("In: %s\n", appearsin);
    printf("Pages: %d--%d\n", startpage, endpage);
}

/*void print_publication(){
    if (!strcmp(type, "book")){
    	print_book();
    }else if (!strcmp(type, "journal")){
    	print_journal();
    }else if (!strcmp(type, "proceedings")){
    	print_proceedings();
    }else if (!strcmp(type, "article")){
    	print_article();
    }
    printf("\n");
}*/

void sorted_publication(){   
    EXEC SQL DECLARE C1 CURSOR FOR
        with
        get_book(pubid, year, name) as(
	   select p.pubid, b.year, a.name
	   from publication p, book b, author a, wrote w
	   where p.pubid = w.pubid
	    and p.pubid = b.pubid
	    and w.aid = a.aid
	    and w.aorder = 1
        ),
	get_jounal(pubid, year, name) as(
	   select art.appearsin, j.year, a.name
	   from article art, journal j, author a, wrote w
	   where art.pubid = w.pubid
	     and art.appearsin = j.pubid
	     and w.aid = a.aid
	),
	get_proceedings(pubid, year, name) as (
	   select art.appearsin, p.year, a.name
           from article art, proceedings p, author a, wrote w
	   where art.pubid = w.pubid
		  and art.appearsin = p.pubid
		  and w.aid = a.aid
	),
	get_article(pubid, year, name) as(
	   select art.pubid, p.year, a.name
	   from article art, proceedings p
	   where art.appearsin = p.pubid
	     and art.pubid = w.pubid
	     and w.aid = a.aid
	     and w.aorder = 1
	   union
	   select art.pubid, j.year
	   from article art, journal j
	   where art.appearsin = w.pubid
	     and art.pubid = w.pubid
	     and w.aid = a.aid
	     and w.aorder = 1
	)
	select b.pubid, 'book' as type, b.year, a.name
            from get_book b
        union
        select j.pubid, 'journal' as type, j.year, '' as name
            from get_journal j
        union
        select p.pubid, 'proceedings' as type, p.year, '' as name
            from get_proceedings p
        union
        select art.pubid, 'article' as type, ar.year, a.name
            from get_article art, author a, wrote w
        order by year desc, name asc;
    EXEC SQL OPEN C1;

    for( ; ; ){
        EXEC SQL FETCH C1 INTO :pubid, :year, :author_name, :type;
        if (SQLCODE == 100)  break;
	else {
	   EXEC SQL
             select title INTO :title
	     from publication
	     where pubid = :pubid;
         printf("Pubid: %s\n", pubid);
         printf("Type: %s\n", type);
         printf("Title: %s\n", title);

         if (!strcmp(type, "book")){
	 print_book();
	 }else if (!strcmp(type, "journal")){
	 print_journal();
	 }else if (!strcmp(type, "proceedings")){
	 print_proceedings();
	 }else if (!strcmp(type, "article")){
	 print_article();
	 }
	 printf("\n");
      
    }

    EXEC SQL CLOSE C1;
}


//struct sqlda *slct;

int main(int argc, char *argv[]) {
   /* bail out on error */
   EXEC SQL WHENEVER SQLERROR  GO TO error;

   /* connect to the database */
   EXEC SQL CONNECT TO :db;
   printf("Connected to DB2\n");
   strcpy(author_name, argv[1]);
   sorted_publication();
   
   /* and get out of here */
   EXEC SQL COMMIT;
   EXEC SQL CONNECT reset;
   exit(0);

error:
   check_error("My error",&sqlca);
   EXEC SQL WHENEVER SQLERROR CONTINUE;

   EXEC SQL ROLLBACK;
   EXEC SQL CONNECT reset;
   exit(1);
}
